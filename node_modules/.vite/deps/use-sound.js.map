{
  "version": 3,
  "sources": ["../../use-sound/src/use-on-mount.ts", "../../use-sound/src/index.ts"],
  "sourcesContent": ["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n", "import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n"],
  "mappings": "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",
  "names": ["useOnMount", "callback", "React", "useSound", "src", "id", "volume", "playbackRate", "soundEnabled", "interrupt", "onload", "delegated", "HowlConstructor", "useRef", "isMounted", "useState", "duration", "setDuration", "sound", "setSound", "handleLoad", "call", "current", "then", "mod", "Howl", "Array", "isArray", "rate", "useEffect", "JSON", "stringify", "play", "useCallback", "options", "forceSoundEnabled", "stop", "pause", "returnedValue"]
}
